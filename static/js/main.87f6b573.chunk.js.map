{"version":3,"sources":["reducers/imageReducer.js","reducers/index.js","actions/types.js","store.js","config.js","actions/imageActions.js","Components/Search.js","Components/Image.js","Components/Images.js","Components/Query.js","Components/Queries.js","App.js","serviceWorker.js","index.js"],"names":["initialState","searchTerm","queries","images","combineReducers","state","arguments","length","undefined","action","type","Object","objectSpread","payload","concat","middleware","thunk","store","createStore","rootReducer","applyMiddleware","apply","unsplashAPI","ACCESS_KEY","API_ROOT","getImages","dispatch","query","trim","axios","get","then","res","imgUrl","data","map","img","urls","regular","catch","err","console","log","error","message","saveQuery","Search","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","refs","search","value","props","handleOnSave","inherits","createClass","key","react_default","a","createElement","className","onSubmit","htmlFor","id","name","placeholder","ref","onClick","Component","connect","Image","src","url","alt","Images","renderImages","image","Components_Image","Queries","renderQueries","Components_Query","App","es","Components_Search","Components_Images","Components_Queries","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87f6b573.chunk.js","sourcesContent":["import { GET_IMAGES, SEARCH_TERM, SAVE_QUERY } from '../actions/types';\r\n\r\nconst initialState = {\r\n  searchTerm: 'dogs',\r\n  queries: ['dogs'],\r\n  images: []\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_IMAGES:\r\n      return {\r\n        ...state,\r\n        images: action.payload\r\n      };\r\n    case SEARCH_TERM:\r\n      return {\r\n        ...state,\r\n        queries: action.payload\r\n      };\r\n    case SAVE_QUERY:\r\n      return {\r\n        ...state,\r\n        queries: state.queries.concat(action.payload)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport imageReducer from './imageReducer';\r\n\r\nexport default combineReducers({\r\n  images: imageReducer\r\n});\r\n","export const GET_IMAGES = 'GET_IMAGES';\r\nexport const SEARCH_TERM = 'SEARCH_TERM';\r\nexport const SAVE_QUERY = 'SAVE_QUERY';\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  applyMiddleware(...middleware)\r\n);\r\nexport default store;\r\n","const unsplashAPI = {\r\n  ACCESS_KEY:\r\n    '2d6042741b2c1c6e257f47b57c04e2229c6baaaec7a4331efee58eda276037bf',\r\n  API_ROOT: 'https://api.unsplash.com'\r\n};\r\n// SECRET_KEY:\r\n//   '4c5c658dde557f0772ca975ac7176da20c550fd6352ff562ae2038db81d2d7e2'\r\n\r\nexport default unsplashAPI;\r\n","import axios from 'axios';\r\nimport { GET_IMAGES, SEARCH_TERM, SAVE_QUERY } from './types';\r\nimport unsplashAPI from '../config';\r\n\r\nexport const getImages = state => dispatch => {\r\n  const { ACCESS_KEY, API_ROOT } = unsplashAPI;\r\n  const query = state.searchTerm.trim();\r\n  if (query.length > 0) {\r\n    axios\r\n      .get(\r\n        `${API_ROOT}/photos/random/?client_id=${ACCESS_KEY}&query=${query}&count=20`\r\n      )\r\n      .then(res => {\r\n        // console.log(res.data);\r\n        const imgUrl = res.data.map(img => img.urls.regular);\r\n        dispatch({\r\n          type: GET_IMAGES,\r\n          payload: { imgUrl }\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  } else {\r\n    console.error({ message: 'Invalid search term' });\r\n  }\r\n};\r\n\r\nexport const searchTerm = query => dispatch => {\r\n  dispatch({\r\n    type: SEARCH_TERM,\r\n    payload: query\r\n  });\r\n};\r\nexport const saveQuery = query => dispatch => {\r\n  if (query.length > 0) {\r\n    dispatch({\r\n      type: SAVE_QUERY,\r\n      payload: query\r\n    });\r\n  } else {\r\n    console.error({ message: 'No query to save' });\r\n  }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { searchTerm, getImages, saveQuery } from '../actions/imageActions';\r\n\r\nexport class Search extends Component {\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const searchTerm = this.refs.search.value;\r\n    this.props.images.searchTerm = searchTerm;\r\n    this.props.getImages(this.props.images);\r\n  };\r\n\r\n  handleOnSave = () => {\r\n    const searchTerm = this.refs.search.value;\r\n    this.props.saveQuery(searchTerm);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search__container item\">\r\n        <form className=\"search__form\" onSubmit={this.handleSubmit}>\r\n          <div className=\"search__field\">\r\n            <label htmlFor=\"search\">\r\n              <input\r\n                className=\"search__input\"\r\n                type=\"text\"\r\n                id=\"search\"\r\n                name=\"search\"\r\n                placeholder=\"Search for an Image\"\r\n                ref=\"search\"\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"search__buttons\">\r\n            <button className=\"search__button\" type=\"submit\">\r\n              Search\r\n            </button>\r\n            <button\r\n              onClick={this.handleOnSave}\r\n              className=\"search__button\"\r\n              type=\"button\"\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  images: state.images\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { searchTerm, getImages, saveQuery }\r\n)(Search);\r\n","import React from 'react';\r\n// import image from '../assets/dog.jpg';\r\n\r\nconst Image = props => {\r\n  return (\r\n    <div className=\"image__container\">\r\n      <img className=\"image__img\" src={props.url} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Image;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getImages } from '../actions/imageActions';\r\nimport Image from './Image';\r\n\r\nexport class Images extends Component {\r\n  renderImages = () => {\r\n    const { images } = this.props.images;\r\n    if (images.imgUrl) {\r\n      return images.imgUrl.map(image => <Image key={image} url={image} />);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <div className=\"images__container item\">{this.renderImages()}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  images: state.images\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getImages }\r\n)(Images);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getImages } from '../actions/imageActions';\r\n\r\nconst Query = props => {\r\n  const handleOnClick = () => {\r\n    const query = {\r\n      searchTerm: props.query\r\n    };\r\n    props.getImages(query);\r\n  };\r\n  return (\r\n    <div className=\"query__container\">\r\n      <p>{props.query}</p>\r\n      <button onClick={handleOnClick} className=\"query__button\">\r\n        Search\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  images: state.images\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getImages }\r\n)(Query);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { saveQuery } from '../actions/imageActions';\r\nimport Query from './Query';\r\n\r\nexport class Queries extends Component {\r\n  renderQueries = () => {\r\n    const queries = this.props.images.queries;\r\n    return queries.map(query => <Query key={query} query={query} />);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"queries__container item\">{this.renderQueries()}</div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  images: state.images\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { saveQuery }\r\n)(Queries);\r\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Search from './Components/Search';\nimport Images from './Components/Images';\nimport Queries from './Components/Queries';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <main className=\"container\">\n            <Search />\n            <Images />\n            <Queries />\n          </main>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}